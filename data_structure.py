# -*- coding: utf-8 -*-
"""Data_Structure.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10nTPIq4ndscUPPQROAIO5N2NY1w_Nxh2

## **Data Structure**

**BASIC - SEARCH & SORT:**

---

a) Linear Search
"""

def search(arr, target):
    for i in range(len(arr)):

        if arr[i] == target:
            return i

    return -1

arr = [2, 5, 8, 10, 16, 22, 25]
target = 16
result = search(arr, target)

if result != -1:
    print("Element is present at index", str(result))
else:
    print("Element is not present in array")

"""b) Iterative Binary Search"""

def binary_itr(arr, start, end, target):
    while start <= end:

        mid = (start + end) // 2

        if arr[mid] < target:
            start = mid + 1

        elif arr[mid] > target:
            end = mid - 1

        else:
            return mid

    return start
    #return -1

arr = [2, 5, 8, 10, 16, 22, 25]
target = 25

result = binary_itr(arr, 0, len(arr) - 1, target)
#print(result)

if result != -1:
    print("Element is present at index %d" % result)
else:
    print("Element is not present in array")

"""c) Recursive Binary Search"""

def binary_recur(arr, start, end, target):
    if end >= start:

        mid = start + end - 1 // 2

        if arr[mid] < target:
            binary_recur(arr, mid + 1, end, target)

        elif arr[mid] > target:
            return binary_recur(arr, start, mid - 1, target)
        else:
            return mid
    else:
        return -1

arr = [2, 5, 8, 10, 16, 22, 25]
target = 10
result = binary_recur(arr, 0, len(arr) - 1, target)

if result != -1:
    print("Element is present at index", str(result))
else:
    print("Element is not present in array")

"""d) Bubble Sort-Optimized"""

A = [9, 8, 7, 6, 5, 4, 3, 2, 1]

def bubble_optimized(A):
    iterations = 0
    for i in range(len(A)):
        for j in range(len(A)-i-1):
            iterations += 1
            if A[j] > A[j+1]:
                A[j], A[j+1] = A[j+1], A[j]
    return A, iterations
print(bubble_optimized(A))

"""e) Bubble Sort-Unoptimized"""

def swap(A, i, j):
    temp = A[i]
    A[i] = A[j]
    A[j] = temp

def bubble_sort_un_op(A):
    iterations = 0

    for i in A:
        for j in range(len(A)-1):
            iterations += 1
            if A[j] > A[j+1]:
                swap(A, j, j + 1)
    return A, iterations

print(bubble_sort_un_op(A))

"""f) Insertion Sort-Shifting Elements"""

def insert_sort(A):
    for j in range(1, len(A)):
        key = A[j]
        i = j - 1
        while i >= 0 and A[i] > key:
            A[i + 1] = A[i]
            i -= 1
        A[i + 1] = key
    return A

A = [5, 2, 4, 6, 1, 3]
print(insert_sort(A))

"""g) Insertion Sort-Swapping Elements"""

def swap(A):
    for i in range(1, len(A)):
        for j in range(i-1, -1, -1):
            if A[j] > A[j+1]:
                A[j], A[j+1] = A[j+1], A[j]
            else:
                break
    return A
print(swap(A))